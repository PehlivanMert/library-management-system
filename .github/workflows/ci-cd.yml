name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ghcr.io/pehlivanmert/library-management-system
  DOCKER_TAG: ${{ github.sha }}
  POSTGRES_DB: library
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REDIS_PASSWORD: pass
  KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  ZOOKEEPER_CLIENT_PORT: 2181
  PROMETHEUS_PORT: 9090

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        env:
          REDIS_PASSWORD: ${{ env.REDIS_PASSWORD }}
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      zookeeper:
        image: confluentinc/cp-zookeeper:7.3.0
        env:
          ZOOKEEPER_CLIENT_PORT: ${{ env.ZOOKEEPER_CLIENT_PORT }}
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
        options: >-
          --health-cmd "echo srvr | nc localhost 2181"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      kafka:
        image: confluentinc/cp-kafka:7.3.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: ${{ env.KAFKA_ADVERTISED_LISTENERS }}
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-topics.sh --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      prometheus:
        image: prom/prometheus:v2.45.0
        ports:
          - 9090:9090
        volumes:
          - ./prometheus.yml:/etc/prometheus/prometheus.yml
        options: >-
          --health-cmd "wget -q --spider http://localhost:9090/-/healthy"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package -Dmaven.test.skip=true

      - name: Build Docker image
        run: docker build -t $DOCKER_IMAGE:$DOCKER_TAG .

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: pehlivanmert
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push Docker image to GitHub Container Registry
        run: docker push $DOCKER_IMAGE:$DOCKER_TAG

      - name: Push Docker image to Docker Hub
        run: |
          docker tag $DOCKER_IMAGE:$DOCKER_TAG pehlivanmert/library-management-system:$DOCKER_TAG
          docker push pehlivanmert/library-management-system:$DOCKER_TAG

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Docker Compose ile deployment
          docker-compose -f docker-compose.yml up -d
          
          # Servislerin sağlık kontrolü
          echo "Checking services health..."
          ./scripts/health-check.sh